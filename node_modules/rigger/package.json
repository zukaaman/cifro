{
  "_args": [
    [
      {
        "raw": "rigger@~0.5.7",
        "scope": null,
        "escapedName": "rigger",
        "name": "rigger",
        "rawSpec": "~0.5.7",
        "spec": ">=0.5.7 <0.6.0",
        "type": "range"
      },
      "/home/konstantin/development/cifro/node_modules/gulp-rigger"
    ]
  ],
  "_from": "rigger@>=0.5.7 <0.6.0",
  "_id": "rigger@0.5.10",
  "_inCache": true,
  "_location": "/rigger",
  "_npmUser": {
    "name": "damonoehlman",
    "email": "damon.oehlman@gmail.com"
  },
  "_npmVersion": "1.4.16",
  "_phantomChildren": {},
  "_requested": {
    "raw": "rigger@~0.5.7",
    "scope": null,
    "escapedName": "rigger",
    "name": "rigger",
    "rawSpec": "~0.5.7",
    "spec": ">=0.5.7 <0.6.0",
    "type": "range"
  },
  "_requiredBy": [
    "/gulp-rigger"
  ],
  "_resolved": "https://registry.npmjs.org/rigger/-/rigger-0.5.10.tgz",
  "_shasum": "0a72f7a497f76a4bea9ba7a90ac4264964c5cf6e",
  "_shrinkwrap": null,
  "_spec": "rigger@~0.5.7",
  "_where": "/home/konstantin/development/cifro/node_modules/gulp-rigger",
  "author": {
    "name": "Damon Oehlman",
    "email": "damon.oehlman@gmail.com"
  },
  "bin": {
    "rig": "./bin/rig"
  },
  "bugs": {
    "url": "http://github.com/buildjs/rigger/issues"
  },
  "dependencies": {
    "async": "~0.2",
    "buildjs.core": "~0.1",
    "debug": "*",
    "getit": "~0.4.0",
    "underscore": "~1.6.0"
  },
  "description": "Javascript file parser and include engine",
  "devDependencies": {
    "coffee-script": "^1",
    "findit": "^1",
    "mkdirp": "~0.5",
    "mocha": "^1",
    "nib": "^1",
    "pegjs": "~0.8",
    "rigger-collate": "0.5.x",
    "stylus": "~0.45"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "0a72f7a497f76a4bea9ba7a90ac4264964c5cf6e",
    "tarball": "https://registry.npmjs.org/rigger/-/rigger-0.5.10.tgz"
  },
  "gitHead": "d941d21fa32f15c93d4e29ae2f3b91ea65f53d05",
  "homepage": "https://github.com/buildjs/rigger",
  "keywords": [
    "build",
    "include",
    "transpile"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "damonoehlman",
      "email": "damon.oehlman@sidelab.com"
    }
  ],
  "name": "rigger",
  "optionalDependencies": {},
  "readme": "# Rigger\n\nRigger is a build time include engine for Javascript, CSS, CoffeeScript and in general any type of text file that you wish to might want to \"include\" other files into.\n\n<a href=\"http://travis-ci.org/#!/buildjs/rigger\"><img src=\"https://secure.travis-ci.org/buildjs/rigger.png\" alt=\"Build Status\"></a>\n\nIt was created to make the process of creating Javascript libraries a more structured process, but can be used for other tasks also.\n\nAs a developer you are encouraged to write modular, reusable code but when it comes to writing client-side applications your ability to do this effectively is generally hampered by what I call the _single-file principle_.  In most cases a good programmer rages against this and implements some kind of custom `Makefile`, [ant build](http://ant.apache.org/) or [Rakefile](http://rake.rubyforge.org/) to help with their build.\n\nThe \"build\" process, however, generally involves taking a number of files and concatenating them together in a sensible order.  I, however, wanted something more flexible.  To be precise, I wanted the following:\n\n- The ability to inject a file into specific line in another file.\n- The ability to reuse code from other libraries.\n- The ability to do includes from the web (namely github repos)\n\nThis is the functionality that Rigger provides.  It was originally built 6 months ago as part of [Interleave](/DamonOehlman/interleave) but has it's own identity, tests and is generally better.\n\n## PSA: Use Browserify\n\nAs a quick note, I think it's important to mention that for just about every project that I'm writing these days I'm using [browserify](https://github.com/substack/node-browserify).  While early versions of browserify didn't do what I wanted, since version 2 onwards it's been fantastic.  So I'd encourage you to take a look at whether browserif solves your needs like it does mine.\n\nIf not, then the following tools implement similar functionality to rigger and are more actively maintained:\n\n- https://github.com/timrwood/includer\n\n## Using Rigger\n\nFirst you will want to install it.  You'll need [npm](http://npmjs.org) to do this, once you do you can simply run `npm install -g rigger`. To get starting using rigger, you simply start placing special __include comments__ in a file that you want rigger to process.\n\n__Javascript:__\n\n```js\n//= includes/test\n```\n\n__CoffeeScript:__\n\n```coffee\n#= includes/test\n```\n\n__CSS:__\n\n```css\n/*= includes/test */\n```\n\nNotice that each of the examples is using single-line comments (even if they are a block comment in the case of the CSS example).  This is important to note as Rigger parses files on a __line by line__ basis rather than through tokenizing.  If you use block comments like the following CSS example, it won't work:\n\n```css\n/*=\nincludes/test1\nincludes/test2\n*/\n```\n\nOnce you have a file that is has been properly rigged, you can use the `rig` command line tool to turn a rigged file into it's big brother:\n\n```\nrig input.js > output.js\n```\n\n## Include All the Things\n\nRigger supports a number of special include formats, and these are demonstrated in examples below.  While JS examples are provided, the formats will work in any of the known file formats.  In addition, rigger supports recursive (nested) imports, so an imported file can have imports itself, and those imports can have imports, etc.\n\n### Remote Resources\n\nRemote resources are those stored accessible via HTTP (or HTTPS).\n\n__HTTP(S) Include:__\n\n```js\n// include jquery from the CDN so you can run offline perhaps...\n//= http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js\n```\n\n__Github Include:__\n\n```js\n//= github://DamonOehlman/alignit/alignit.js\n```\n\n### Multiple File Include\n\nBeing lazy is ok.  Rigger provides some nice shortcuts to help you in your quest:\n\n__Directory Includes:__\n\nSimply specify a directory in the include string and all files of the same type as the currently parsed file will be included.  In the tests/input directory have a look for the `local-includedir.js` and `local-includedir.css` files.\n\n```js\n//= ../includes/testdir\n```\n\n__Cherrypick Include:__\n\nIn some instances you may want to cherrypick particular files from a directory / remote repository.  Rather than typing multiple include lines, you can simply type one statement and use square brackets to signal to Rigger that you want to include multiple files:\n\n```js\n//= ../includes/testdir[a, b]\n```\n\n## Plugin Support\n\nIn addition to including files you can also use some plugins to extend the core functionality.  To flag that you want to use a plugin in your core files, use add the word plugin __directly__ after the `=` in the comment (e.g. `//=plugin name params`, `/*=plugin name params */`, `#=plugin name params`, etc).\n\n### shim plugin\n\nThe shim plugin allows to you require specific ES5 shims that you wish to include into your code so IE doesn't go and break on you:\n\n```js\n//=shim String.trim Array.indexOf\n```\n\nThe shim contents are sourced from the [buildjs/shims](https://github.com/buildjs/shims) repository, which is currently incomplete so feel free to help out by adding appropriate shims.\n\n## Programmatic Use\n\nTo be completed.\n\n## Streams FTW!\n\nOne of the simplest ways of composing process flows in node is to use streams, and while Interleave does not support a streaming interface, Rigger inherits from the node [Stream](http://nodejs.org/docs/latest/api/stream.html).\n\nThis means that you can do all kinds of things prior to rigging in your inline dependencies and all kinds of things afterwards too.\n\n## License(s)\n\n### MIT\n\nCopyright (c) 2013 Damon Oehlman <damon.oehlman@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/buildjs/rigger.git"
  },
  "scripts": {
    "test": "node_modules/mocha/bin/mocha"
  },
  "version": "0.5.10"
}
