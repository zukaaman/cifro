{
  "_args": [
    [
      {
        "raw": "p-queue@^1.0.0",
        "scope": null,
        "escapedName": "p-queue",
        "name": "p-queue",
        "rawSpec": "^1.0.0",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "/home/konstantin/development/cifro/node_modules/gulp-install"
    ]
  ],
  "_from": "p-queue@>=1.0.0 <2.0.0",
  "_id": "p-queue@1.2.0",
  "_inCache": true,
  "_location": "/p-queue",
  "_nodeVersion": "6.10.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/p-queue-1.2.0.tgz_1503925050251_0.746532928198576"
  },
  "_npmUser": {
    "name": "floatdrop",
    "email": "floatdrop@gmail.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "p-queue@^1.0.0",
    "scope": null,
    "escapedName": "p-queue",
    "name": "p-queue",
    "rawSpec": "^1.0.0",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/gulp-install"
  ],
  "_resolved": "https://registry.npmjs.org/p-queue/-/p-queue-1.2.0.tgz",
  "_shasum": "639cb8b07270c15b71d7a6446a8e30414f3c96d1",
  "_shrinkwrap": null,
  "_spec": "p-queue@^1.0.0",
  "_where": "/home/konstantin/development/cifro/node_modules/gulp-install",
  "author": {
    "name": "Sindre Sorhus",
    "email": "sindresorhus@gmail.com",
    "url": "sindresorhus.com"
  },
  "bugs": {
    "url": "https://github.com/sindresorhus/p-queue/issues"
  },
  "dependencies": {},
  "description": "Promise queue with concurrency control",
  "devDependencies": {
    "ava": "*",
    "benchmark": "^2.1.2",
    "delay": "^1.3.1",
    "in-range": "^1.0.0",
    "random-int": "^1.0.0",
    "time-span": "^1.0.0",
    "xo": "*"
  },
  "directories": {},
  "dist": {
    "shasum": "639cb8b07270c15b71d7a6446a8e30414f3c96d1",
    "tarball": "https://registry.npmjs.org/p-queue/-/p-queue-1.2.0.tgz"
  },
  "engines": {
    "node": ">=4"
  },
  "files": [
    "index.js"
  ],
  "gitHead": "82151dbc7e2dc8cf3683fe31469da45c89128f8c",
  "homepage": "https://github.com/sindresorhus/p-queue#readme",
  "keywords": [
    "promise",
    "queue",
    "enqueue",
    "limit",
    "limited",
    "concurrency",
    "throttle",
    "throat",
    "rate",
    "batch",
    "ratelimit",
    "priority",
    "priorityqueue",
    "fifo",
    "job",
    "task",
    "async",
    "await",
    "promises",
    "bluebird"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "Vsevolod Strukchinsky",
      "email": "floatdrop@gmail.com",
      "url": "github.com/floatdrop"
    }
  ],
  "name": "p-queue",
  "optionalDependencies": {},
  "readme": "# p-queue [![Build Status](https://travis-ci.org/sindresorhus/p-queue.svg?branch=master)](https://travis-ci.org/sindresorhus/p-queue)\n\n> Promise queue with concurrency control\n\nUseful for rate-limiting async operations. For example, when interacting with a REST API or when doing CPU/memory intensive tasks.\n\n\n## Install\n\n```\n$ npm install --save p-queue\n```\n\n\n## Usage\n\nHere we run only one promise at the time. For example, set `concurrency` to 4 to run four promises at the time.\n\n```js\nconst PQueue = require('p-queue');\nconst got = require('got');\n\nconst queue = new PQueue({concurrency: 1});\n\nqueue.add(() => got('sindresorhus.com')).then(() => {\n\tconsole.log('Done: sindresorhus.com');\n});\n\nqueue.add(() => got('ava.li')).then(() => {\n\tconsole.log('Done: ava.li');\n});\n\ngetUnicornTask().then(task => queue.add(task)).then(() => {\n\tconsole.log('Done: Unicorn task');\n});\n```\n\n\n## API\n\n### PQueue([options])\n\nReturns a new `queue` instance.\n\n#### options\n\nType: `Object`\n\n##### concurrency\n\nType: `number`<br>\nDefault: `Infinity`<br>\nMinimum: `1`\n\nConcurrency limit.\n\n##### queueClass\n\nType: `Function`\n\nClass with a `enqueue` and `dequeue` method, and a `size` getter. See the [Custom QueueClass](#custom-queueclass) section.\n\n### queue\n\n`PQueue` instance.\n\n#### .add(fn, [options])\n\nReturns the promise returned by calling `fn`.\n\n##### fn\n\nType: `Function`\n\nPromise-returning/async function.\n\n#### options\n\nType: `Object`\n\n##### priority\n\nType: `number`<br>\nDefault: `0`\n\nPriority of operation. Operations with greater priority will be scheduled first.\n\n#### .addAll(fns, [options])\n\nSame as `.add`, but accepts array of async functions and returns promise, that resolves when all async functions are resolved.\n\n#### .onEmpty()\n\nReturns a promise that settles when the queue becomes empty.\n\nCan be called multiple times. Useful if you for example add additional items at a later time.\n\n#### .clear()\n\nClear the queue.\n\n#### .size\n\nSize of the queue.\n\n#### .pending\n\nNumber of pending promises.\n\n\n## Advanced example\n\nA more advanced example to help you understand the flow.\n\n```js\nconst delay = require('delay');\nconst PQueue = require('p-queue');\n\nconst queue = new PQueue({concurrency: 1});\n\ndelay(200).then(() => {\n\tconsole.log(`8. Pending promises: ${queue.pending}`);\n\t//=> '8. Pending promises: 0'\n\n\tqueue.add(() => Promise.resolve('üêô')).then(console.log.bind(null, '11. Resolved'));\n\n\tconsole.log('9. Added üêô');\n\n\tconsole.log(`10. Pending promises: ${queue.pending}`);\n\t//=> '10. Pending promises: 1'\n\n\tqueue.onEmpty().then(() => {\n\t\tconsole.log('12. Queue is empty again');\n\t});\n});\n\nqueue.add(() => Promise.resolve('ü¶Ñ')).then(console.log.bind(null, '5. Resolved'));\nconsole.log('1. Added ü¶Ñ');\n\nqueue.add(() => Promise.resolve('üê¥')).then(console.log.bind(null, '6. Resolved'));\nconsole.log('2. Added üê¥');\n\nqueue.onEmpty().then(() => {\n\tconsole.log('7. Queue is empty');\n});\n\nconsole.log(`3. Queue size: ${queue.size}`);\n//=> '3. Queue size: 1`\nconsole.log(`4. Pending promises: ${queue.pending}`);\n//=> '4. Pending promises: 1'\n```\n\n```\n$ node example.js\n1. Added ü¶Ñ\n2. Added üê¥\n3. Queue size: 1\n4. Pending promises: 1\n5. Resolved ü¶Ñ\n6. Resolved üê¥\n7. Queue is empty\n8. Pending promises: 0\n9. Added üêô\n10. Pending promises: 1\n11. Resolved üêô\n12. Queue is empty again\n```\n\n\n## Custom QueueClass\n\nFor implementing more complex scheduling policies, you can provide a QueueClass in the options:\n\n```js\nclass QueueClass {\n\tconstructor() {\n\t\tthis._queue = [];\n\t}\n\tenqueue(run, options) {\n\t\tthis._queue.push(run);\n\t}\n\tdequeue() {\n\t\treturn this._queue.shift();\n\t}\n\tget size() {\n\t\treturn this._queue.length;\n\t}\n}\n```\n\n`p-queue` will call corresponding methods to put and get operations from this queue.\n\n\n## Related\n\n- [p-limit](https://github.com/sindresorhus/p-limit) - Run multiple promise-returning & async functions with limited concurrency\n- [p-throttle](https://github.com/sindresorhus/p-throttle) - Throttle promise-returning & async functions\n- [p-debounce](https://github.com/sindresorhus/p-debounce) - Debounce promise-returning & async functions\n- [p-all](https://github.com/sindresorhus/p-all) - Run promise-returning & async functions concurrently with optional limited concurrency\n- [More‚Ä¶](https://github.com/sindresorhus/promise-fun)\n\n\n## Created by\n\n- [Sindre Sorhus](https://github.com/sindresorhus)\n- [Vsevolod Strukchinsky](https://github.com/floatdrop)\n\n\n## License\n\nMIT ¬© [Sindre Sorhus](https://sindresorhus.com)\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/sindresorhus/p-queue.git"
  },
  "scripts": {
    "bench": "node bench.js",
    "test": "xo && ava"
  },
  "version": "1.2.0",
  "xo": {
    "esnext": true
  }
}
